// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::transmute_ptr_to_ref)]
#[allow(clippy::upper_case_acronyms)]
#[warn(single_use_lifetimes)]
mod imp {
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;

    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("funcprobe_bpf")
            .map("funcprob.rodata", false)
            .prog("kfunc_enter")
            .prog("kfunc_exit");

        builder.build()
    }

    #[derive(Default)]
    pub struct FuncprobeSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'a> SkelBuilder<'a> for FuncprobeSkelBuilder {
        type Output = OpenFuncprobeSkel<'a>;
        fn open(mut self) -> libbpf_rs::Result<OpenFuncprobeSkel<'a>> {
            let mut skel_config = build_skel_config()?;
            let open_opts = self.obj_builder.opts(std::ptr::null());

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenFuncprobeSkel { obj, skel_config })
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
        ) -> libbpf_rs::Result<OpenFuncprobeSkel<'a>> {
            let mut skel_config = build_skel_config()?;

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenFuncprobeSkel { obj, skel_config })
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    pub struct OpenFuncprobeMaps<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenFuncprobeMaps<'_> {
        pub fn rodata(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("funcprob.rodata").unwrap()
        }
    }

    pub struct OpenFuncprobeMapsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenFuncprobeMapsMut<'_> {
        pub fn rodata(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("funcprob.rodata").unwrap()
        }
    }

    pub struct OpenFuncprobeProgs<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenFuncprobeProgs<'_> {
        pub fn kfunc_enter(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("kfunc_enter").unwrap()
        }

        pub fn kfunc_exit(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("kfunc_exit").unwrap()
        }
    }

    pub struct OpenFuncprobeProgsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenFuncprobeProgsMut<'_> {
        pub fn kfunc_enter(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("kfunc_enter").unwrap()
        }

        pub fn kfunc_exit(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("kfunc_exit").unwrap()
        }
    }

    pub mod funcprobe_rodata_types {
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}
    }

    pub struct OpenFuncprobeSkel<'a> {
        pub obj: libbpf_rs::OpenObject,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
    }

    impl<'a> OpenSkel for OpenFuncprobeSkel<'a> {
        type Output = FuncprobeSkel<'a>;
        fn load(mut self) -> libbpf_rs::Result<FuncprobeSkel<'a>> {
            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::Object::from_ptr(self.obj.take_ptr())? };

            Ok(FuncprobeSkel {
                obj,
                skel_config: self.skel_config,
                links: FuncprobeLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            &self.obj
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            &mut self.obj
        }
    }
    impl OpenFuncprobeSkel<'_> {
        pub fn progs(&self) -> OpenFuncprobeProgs<'_> {
            OpenFuncprobeProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> OpenFuncprobeProgsMut<'_> {
            OpenFuncprobeProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> OpenFuncprobeMaps<'_> {
            OpenFuncprobeMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> OpenFuncprobeMapsMut<'_> {
            OpenFuncprobeMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    pub struct FuncprobeMaps<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl FuncprobeMaps<'_> {
        pub fn rodata(&self) -> &libbpf_rs::Map {
            self.inner.map("funcprob.rodata").unwrap()
        }
    }

    pub struct FuncprobeMapsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl FuncprobeMapsMut<'_> {
        pub fn rodata(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("funcprob.rodata").unwrap()
        }
    }

    pub struct FuncprobeProgs<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl FuncprobeProgs<'_> {
        pub fn kfunc_enter(&self) -> &libbpf_rs::Program {
            self.inner.prog("kfunc_enter").unwrap()
        }

        pub fn kfunc_exit(&self) -> &libbpf_rs::Program {
            self.inner.prog("kfunc_exit").unwrap()
        }
    }

    pub struct FuncprobeProgsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl FuncprobeProgsMut<'_> {
        pub fn kfunc_enter(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("kfunc_enter").unwrap()
        }

        pub fn kfunc_exit(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("kfunc_exit").unwrap()
        }
    }

    #[derive(Default)]
    pub struct FuncprobeLinks {
        pub kfunc_enter: Option<libbpf_rs::Link>,
        pub kfunc_exit: Option<libbpf_rs::Link>,
    }

    pub struct FuncprobeSkel<'a> {
        pub obj: libbpf_rs::Object,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
        pub links: FuncprobeLinks,
    }

    unsafe impl Send for FuncprobeSkel<'_> {}
    unsafe impl Sync for FuncprobeSkel<'_> {}

    impl Skel for FuncprobeSkel<'_> {
        fn object(&self) -> &libbpf_rs::Object {
            &self.obj
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            &mut self.obj
        }

        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            self.links = FuncprobeLinks {
                kfunc_enter: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
                kfunc_exit: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(1)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
            };

            Ok(())
        }
    }
    impl FuncprobeSkel<'_> {
        pub fn progs(&self) -> FuncprobeProgs<'_> {
            FuncprobeProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> FuncprobeProgsMut<'_> {
            FuncprobeProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> FuncprobeMaps<'_> {
            FuncprobeMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> FuncprobeMapsMut<'_> {
            FuncprobeMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 11, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 107, 112, 114, 111, 98, 101, 47, 107, 102, 117, 110, 99, 0, 107, 114, 101, 116, 112,
        114, 111, 98, 101, 47, 107, 102, 117, 110, 99, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46,
        114, 111, 100, 97, 116, 97, 0, 102, 117, 110, 99, 112, 114, 111, 98, 101, 46, 98, 112, 102,
        46, 99, 0, 95, 95, 95, 95, 107, 102, 117, 110, 99, 95, 101, 110, 116, 101, 114, 46, 95, 95,
        95, 95, 102, 109, 116, 0, 95, 95, 95, 95, 107, 102, 117, 110, 99, 95, 101, 120, 105, 116,
        46, 95, 95, 95, 95, 102, 109, 116, 0, 107, 102, 117, 110, 99, 95, 101, 110, 116, 101, 114,
        0, 107, 102, 117, 110, 99, 95, 101, 120, 105, 116, 0, 76, 73, 67, 69, 78, 83, 69, 0, 46,
        114, 101, 108, 107, 112, 114, 111, 98, 101, 47, 107, 102, 117, 110, 99, 0, 46, 114, 101,
        108, 107, 114, 101, 116, 112, 114, 111, 98, 101, 47, 107, 102, 117, 110, 99, 0, 46, 66, 84,
        70, 0, 46, 66, 84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78,
        0, 0, 0, 1, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 1, 0, 6, 0, 21, 0, 0, 0,
        0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0,
        0, 137, 0, 0, 0, 18, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 148, 0, 0,
        0, 17, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 21, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0,
        0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 121, 19, 80, 0, 0, 0, 0, 0, 24, 1, 0, 0, 21, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 183, 2, 0, 0, 11, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 183, 0, 0, 0,
        0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 68, 117, 97, 108, 32, 66, 83, 68, 47, 71, 80, 76, 0,
        102, 117, 110, 99, 116, 105, 111, 110, 32, 103, 101, 116, 32, 99, 97, 108, 108, 101, 100,
        10, 0, 114, 101, 116, 117, 114, 110, 32, 37, 100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 159, 235, 1, 0, 24,
        0, 0, 0, 0, 0, 0, 0, 64, 2, 0, 0, 64, 2, 0, 0, 190, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0,
        0, 0, 1, 0, 0, 0, 21, 0, 0, 4, 168, 0, 0, 0, 9, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0,
        0, 3, 0, 0, 0, 64, 0, 0, 0, 17, 0, 0, 0, 3, 0, 0, 0, 128, 0, 0, 0, 21, 0, 0, 0, 3, 0, 0, 0,
        192, 0, 0, 0, 25, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 28, 0, 0, 0, 3, 0, 0, 0, 64, 1, 0, 0,
        31, 0, 0, 0, 3, 0, 0, 0, 128, 1, 0, 0, 35, 0, 0, 0, 3, 0, 0, 0, 192, 1, 0, 0, 39, 0, 0, 0,
        3, 0, 0, 0, 0, 2, 0, 0, 42, 0, 0, 0, 3, 0, 0, 0, 64, 2, 0, 0, 45, 0, 0, 0, 3, 0, 0, 0, 128,
        2, 0, 0, 48, 0, 0, 0, 3, 0, 0, 0, 192, 2, 0, 0, 51, 0, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 54, 0,
        0, 0, 3, 0, 0, 0, 64, 3, 0, 0, 57, 0, 0, 0, 3, 0, 0, 0, 128, 3, 0, 0, 60, 0, 0, 0, 3, 0, 0,
        0, 192, 3, 0, 0, 68, 0, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 71, 0, 0, 0, 3, 0, 0, 0, 64, 4, 0, 0,
        74, 0, 0, 0, 3, 0, 0, 0, 128, 4, 0, 0, 80, 0, 0, 0, 3, 0, 0, 0, 192, 4, 0, 0, 83, 0, 0, 0,
        3, 0, 0, 0, 0, 5, 0, 0, 86, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0,
        0, 13, 5, 0, 0, 0, 100, 0, 0, 0, 1, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0,
        0, 1, 108, 0, 0, 0, 1, 0, 0, 12, 4, 0, 0, 0, 120, 0, 0, 0, 1, 0, 0, 12, 4, 0, 0, 0, 131, 0,
        0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 8, 0, 0, 0,
        10, 0, 0, 0, 13, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 156, 0, 0, 0,
        0, 0, 0, 14, 9, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 3, 0, 0, 0, 0, 12, 0, 0, 0, 10, 0, 0, 0, 21, 0, 0, 0, 164, 0, 0, 0, 0, 0, 0, 14, 13, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 12, 0, 0, 0, 10, 0, 0, 0, 11, 0, 0,
        0, 188, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0, 0, 0, 0, 0, 145, 1, 0, 0, 1, 0, 0, 15, 13, 0, 0,
        0, 11, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 153, 1, 0, 0, 2, 0, 0, 15, 32, 0, 0, 0, 14, 0, 0,
        0, 0, 0, 0, 0, 21, 0, 0, 0, 16, 0, 0, 0, 21, 0, 0, 0, 11, 0, 0, 0, 0, 112, 116, 95, 114,
        101, 103, 115, 0, 114, 49, 53, 0, 114, 49, 52, 0, 114, 49, 51, 0, 114, 49, 50, 0, 98, 112,
        0, 98, 120, 0, 114, 49, 49, 0, 114, 49, 48, 0, 114, 57, 0, 114, 56, 0, 97, 120, 0, 99, 120,
        0, 100, 120, 0, 115, 105, 0, 100, 105, 0, 111, 114, 105, 103, 95, 97, 120, 0, 105, 112, 0,
        99, 115, 0, 102, 108, 97, 103, 115, 0, 115, 112, 0, 115, 115, 0, 117, 110, 115, 105, 103,
        110, 101, 100, 32, 108, 111, 110, 103, 0, 99, 116, 120, 0, 105, 110, 116, 0, 107, 102, 117,
        110, 99, 95, 101, 110, 116, 101, 114, 0, 107, 102, 117, 110, 99, 95, 101, 120, 105, 116, 0,
        99, 104, 97, 114, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69,
        95, 95, 0, 76, 73, 67, 69, 78, 83, 69, 0, 95, 95, 95, 95, 107, 102, 117, 110, 99, 95, 101,
        110, 116, 101, 114, 46, 95, 95, 95, 95, 102, 109, 116, 0, 95, 95, 95, 95, 107, 102, 117,
        110, 99, 95, 101, 120, 105, 116, 46, 95, 95, 95, 95, 102, 109, 116, 0, 47, 114, 111, 111,
        116, 47, 101, 98, 112, 102, 47, 102, 117, 110, 99, 112, 114, 111, 98, 101, 47, 115, 114,
        99, 47, 98, 112, 102, 47, 102, 117, 110, 99, 112, 114, 111, 98, 101, 46, 98, 112, 102, 46,
        99, 0, 32, 32, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34, 102, 117, 110, 99,
        116, 105, 111, 110, 32, 103, 101, 116, 32, 99, 97, 108, 108, 101, 100, 92, 110, 34, 41, 59,
        0, 105, 110, 116, 32, 66, 80, 70, 95, 75, 80, 82, 79, 66, 69, 40, 107, 102, 117, 110, 99,
        95, 101, 110, 116, 101, 114, 41, 0, 105, 110, 116, 32, 66, 80, 70, 95, 75, 82, 69, 84, 80,
        82, 79, 66, 69, 40, 107, 102, 117, 110, 99, 95, 101, 120, 105, 116, 44, 32, 105, 110, 116,
        32, 114, 101, 116, 41, 0, 32, 32, 98, 112, 102, 95, 112, 114, 105, 110, 116, 107, 40, 34,
        114, 101, 116, 117, 114, 110, 32, 37, 100, 92, 110, 34, 44, 32, 114, 101, 116, 41, 59, 0,
        48, 58, 49, 48, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 114, 111, 100, 97, 116, 97, 0,
        107, 112, 114, 111, 98, 101, 47, 107, 102, 117, 110, 99, 0, 107, 114, 101, 116, 112, 114,
        111, 98, 101, 47, 107, 102, 117, 110, 99, 0, 0, 0, 159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0, 0,
        36, 0, 0, 0, 36, 0, 0, 0, 100, 0, 0, 0, 136, 0, 0, 0, 28, 0, 0, 0, 8, 0, 0, 0, 161, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 174, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0,
        16, 0, 0, 0, 161, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 211, 0, 0, 0, 0, 1, 0, 0, 3, 180, 0, 0,
        32, 0, 0, 0, 211, 0, 0, 0, 39, 1, 0, 0, 5, 172, 0, 0, 174, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
        211, 0, 0, 0, 67, 1, 0, 0, 5, 204, 0, 0, 8, 0, 0, 0, 211, 0, 0, 0, 106, 1, 0, 0, 3, 212, 0,
        0, 40, 0, 0, 0, 211, 0, 0, 0, 67, 1, 0, 0, 5, 204, 0, 0, 16, 0, 0, 0, 174, 1, 0, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 140, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 207,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 0, 0, 0,
        0, 0, 0, 240, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0,
        0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 2, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 48, 2, 0, 0, 0, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 104, 2, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 117, 2, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 9, 0,
        0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 2, 0, 0, 0, 0, 0, 0, 16, 0, 0,
        0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
        173, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 2, 0, 0, 0,
        0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0,
        0, 0, 0, 0, 0, 193, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        184, 2, 0, 0, 0, 0, 0, 0, 22, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 198, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 208, 6, 0, 0, 0, 0, 0, 0, 196, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
